---
import type { HTMLTag, Polymorphic } from "astro/types";
import type { CollectionEntry } from "astro:content";

import { getPostSortDate } from "@/data/post";

import FormattedDate from "../FormattedDate.astro";

type Props<Tag extends HTMLTag> = {
	post: CollectionEntry<"post">;
	withDesc?: boolean;
} & Polymorphic<{ as: Tag }>;

const { as: Tag = "div", post, withDesc = false } = Astro.props;
const postDate = getPostSortDate(post);
const previewImages: { alt?: string, src: string; }[] = post.data.previewImages || [];
const firstTwoImages = previewImages.slice(0, 2);
---

<FormattedDate class="min-w-[120px] text-gray-600 dark:text-gray-400" date={postDate} />
<Tag>
	{post.data.draft && <span class="text-red-500">(Draft) </span>}
	<a class="cactus-link" data-astro-prefetch href={`/posts/${post.slug}/`}>
		{post.data.title}
	</a>
	{firstTwoImages.length > 0 && (
		<div class="flex gap-2 mt-2">
			{firstTwoImages.map((image, index) => (
				<img
					alt={image.alt || `Preview image ${index + 1}`}
					class="w-29 h-24 object-cover rounded"
					src={image.src}
				/>
			))}
		</div>
	)}
</Tag>
{withDesc && <q class="line-clamp-3 italic">{post.data.description}</q>}

<style>
	.cactus-link {
		color: inherit;
		text-decoration: underline;
	}
	.cactus-link:hover {
		text-decoration: none;
	}
</style>
